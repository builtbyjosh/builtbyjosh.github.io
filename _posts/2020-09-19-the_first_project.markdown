---
layout: post
title:      "The First Project"
date:       2020-09-19 20:12:11 +0000
permalink:  the_first_project
---


Like many students, I was excited and terrified to start the first major project in the software development course. But mostly terrified. Since the CLI project could be about anything we wanted, I had no idea where to start. It took several days of looking over different API's that were available to even begin to get an idea of the direction I wanted to go in. And even when I finally found the BreweryDB API, I had to start with a blank code editor. I took some time to plan out the different class objects I wanted in my CLI app. As well as how I wanted them to interact. 

I'm sure most students started building their project out from the CLI class and inputing placeholder data to get things to work properly. That would have probably been the smarter route to take. I, however, decided to start working on my API class first. I wanted the data first, then I would set up the rest of the app. The BreweryDB API has a TON of information available. More than I ever needed. But it took some digging to sift through the returned JSON data to figure out how to access the specific data points I needed. 

Once I compiled all of the routes for the information I needed, I created the API class to get all of the necessary data. However, I was running into a problem. In the API class, I calling .new on the two classes I was creating. It wasn't a problem for the Beer class, as it was a unique object everytime. The problem came from the Brewery class I was creating. The data returned from the API was a list of individual beers. And each beer had different attributes such as name, abv, isOrganic, brewery... So this left me with multiple instances of the same brewery name. When Brewery.new was called, I would get the same brewery created, but with different object ID's, since they were being created from each beer that was returned. To fix this, I created an array of hashed for the beer and brewery data. I also moved the creation of new class instances to the CLI API method. So when the api was called, the data would be saved to an array, and I would itterate over the array to create new instances. While the brewery array of hashes still had multiple instances of the same brewery, I was able to call .uniq on the array to only return unique items when calling Brewery.new. This problem was not solved right away. I had to leave it alone for a while and work on other apects of the CLI app.

While the duplicate class objects was on hold, I built out the different methods to call on the available data and display it in a meaningful way. I set up the Beer class to accept a name, abv, style, brewery, and description. This allowed me to to search for beers either by name or by the brewery they were from. If you searched for a specific beer, all of that info would be displayed. I did close to the same thing for the Brewery class. It initialized with a name, year it was establieshed, website, and address. So now a user could get all the important information on a brewery. Once that information was pulled up, I gave the option to display all available beers from that specific brewery. And an option for specific beer infromation once the list was displayed.

The final steps in creating the CLI project were simple error checking. I needed to make sure that if the user entered the wrong thing, it wouldn't break the app or revert back to the main menu. It also gave the option for them to try again, in case they simply mispelled or fat fingered the keyboard. 

Once most things were working, I even decided to add some colorization and ascii art to the CLI. It was really exciting to explore a gem I hadn't heard of before and researching how to impliment it into my CLI project. The project was a hugh undertaking for me. At first glance, I looked at the entirety of the project and started to feel overwhelmed. But I started to tackle one small problem at a time. And little by little, my project started to come together into a working CLI app. 
